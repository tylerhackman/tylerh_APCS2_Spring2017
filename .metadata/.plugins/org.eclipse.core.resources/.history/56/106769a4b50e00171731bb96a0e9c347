package textExcel;

import java.util.Arrays;

public class Spreadsheet implements Grid {
	
	private int numberOfRows = 20;
	private int numberOfColumns = 12;
	Cell [][] spreadsheet = new Cell [21][13];
	
	public Spreadsheet() {
		for(int i = 1; i < 21; i++) {
			for(int j = 1; j < 13; j++) {
				spreadsheet [i][j] = new EmptyCell();
			}
		}
	}
	
	public String processCommand(String command) {
		int row, column;
		String returnString = "";
		if (command.equals("quit")) {
			returnString = "quit";
		}
		if (command.length() <= 3 && command.length() != 0) {
			column = Character.getNumericValue(command.charAt(0)) - 9;
	    	row = Integer.valueOf((command.substring(1))) ;
	    	
	    	returnString = (spreadsheet[row][column].fullCellText());

		}
		if (command.contains("=")) {
			String [] splitInput = command.split(" ", 3);
			SpreadsheetLocation location = new SpreadsheetLocation(splitInput[0]);
			System.out.println(isNumeric(splitInput[2]));
			if (splitInput[2].contains("%")) {
				PercentCell percentCell = new PercentCell(splitInput[2]);
				spreadsheet[location.getRow() + 1][location.getCol() + 1] = percentCell;	
			}
			else {
				if (isNumeric(splitInput[2])) {
					
					ValueCell valueCell = new ValueCell(splitInput[2]);
					spreadsheet[location.getRow() + 1][location.getCol() + 1] = valueCell;	
				}
				else {
					//Create a new array to split, in order to get rid of the quotation marks.
					String [] contentsWithoutQuotes = splitInput[2].split("\"", 3);
					TextCell cell = new TextCell(contentsWithoutQuotes[1]);

					spreadsheet[location.getRow() + 1][location.getCol() + 1] = cell;			
				}
			}
			returnString = this.getGridText();
		}
		if(command.toLowerCase().equals("clear")) {
			Cell [][] clearedSpreadsheet = new Cell[21][13];
			for(int i = 1; i < 21; i++) {
				for(int j = 1; j < 13; j++) {
					clearedSpreadsheet [i][j] = new EmptyCell();
				}
			}
			spreadsheet = clearedSpreadsheet;
			returnString = this.getGridText();
		}
		if(command.toLowerCase().contains("clear ")) {
			String [] splitInput2 = command.split(" ", 2);
			
			SpreadsheetLocation location = new SpreadsheetLocation(splitInput2[1]);
			spreadsheet[location.getRow() + 1][location.getCol() + 1] = new EmptyCell();
			returnString = this.getGridText();	
		}
		return returnString;
	}
	
	public boolean isNumeric(String input) {
		String testString;
		if(input.charAt(1) == '-') {
			testString = input.substring(input.indexOf("-", input.lastIndexOf("\"")));			
		}
		else {
			testString = input.substring(input.indexOf("\"", input.lastIndexOf("\"")));		
		}
		for(int i = 0; i < testString.length(); i ++) {
			if(!Character.isDigit(testString.charAt(i))) {
				return false;
			}
		}
			return true;
	}

	
	public int getRows() {
		return numberOfRows;
	}

	
	public int getCols() {
		return numberOfColumns;
	}

	
	public Cell getCell(Location loc) {
		return spreadsheet[loc.getRow() + 1][loc.getCol() + 1];
	}

	public String getGridText() {
		String grid = "";
		char colCount = 'A';
		
		for(int row = 0; row < 21; row++) {
			for(int col = 0; col < 13; col++) {
				if(row == 0) {
					if(col == 0) {
						grid += "   |";
					}
					else {
					grid += "" + colCount + "         |";
					colCount++;	
					}
				}
				else {
					if (col == 0) {
						if(row < 10) {
							grid += "" + row + "  |";
						}
						else {
							grid += "" + row + " |";
						}
						
					}
					else {
						String test = spreadsheet[row][col].abbreviatedCellText();
						if(test.equals("")){
							grid += "          |";
						}
						else{
							grid += test + "|";
						}
					}
				
			}
		}
			
		grid += "\n";
	}
	return grid;
	}
}
